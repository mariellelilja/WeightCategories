/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.6/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    //application
	id("java")
    id("application")
}

tasks.withType<JavaCompile> {
    options.encoding = "UTF-8"
    sourceCompatibility = "1.8"
    targetCompatibility = "1.8"
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    flatDir {
        dirs("lib")    
    }
}

dependencies {
    // Use JUnit test framework.
    ///testImplementation(libs.junit)

    // This dependency is used by the application.
    ///implementation(libs.guava)
    
    // Use JUnit test framework.
    testImplementation("junit:junit:4.12")
    testImplementation("org.hamcrest:hamcrest-core:1.3")
    implementation("com.github.javaparser:javaparser-symbol-solver-core:3.25.9")
    implementation("com.google.guava:guava:30.1.1-jre")
//    implementation("evosuite:evosuite:1.0.6") {
//        exclude(group = "junit", module = "junit")
//    }
    implementation("plume-util:plume-util:1.9.0")
    implementation("randoop:randoop:4.3.2")
    
        // Randoop dependencies
    implementation("randoop:randoop:4.3.2")
    //implementation("org.plumelib:plume-util:1.9.0");
//    implementation("org.plumelib:plume-lib:1.3.0");
 // implementation ("org.plumelib:plume-util:1.9.3");
 
     // EvoSuite dependencies
    implementation(files("lib/evosuite-1.0.6.jar"))
}

tasks.register<JavaExec>("generateTests") {
    classpath = sourceSets["main"].runtimeClasspath + files("lib/randoop-4.3.2.jar", "lib/plume-util-1.9.0.jar")
    mainClass.set("randoop.main.Main")
    args = listOf("gentests", "--testclass=org.example.WeightHelper", "--junit-output-dir=src/test/java")
}

tasks.register<JavaExec>("generateTestsWithEvoSuite") {
    classpath = sourceSets["main"].runtimeClasspath + files("lib/evosuite-1.0.6.jar")
    mainClass.set("org.evosuite.EvoSuite")
    args = listOf("-class", "org.example.WeightHelper", "-projectCP", "build/classes/java/main", "-Dtest_dir=src/test/java")
}

if (project.hasProperty("testGen")) {
    apply(from = "test-generation-mutation.gradle.kts")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

// Task to aggregate all mutant class files into a single directory
tasks.register<Copy>("aggregateMutantClasses") {
    from(fileTree("MuJava/result/WeightHelper/traditional_mutants")) {
        include("**/*.class")
    }
    into(file("build/mutants"))
}

// Task to run tests on aggregated mutant classes
tasks.register<Test>("runTestsOnMutants") {
    dependsOn("aggregateMutantClasses")
    testClassesDirs = files("build/mutants")
    classpath = files("build/mutants", sourceSets["test"].runtimeClasspath)
    useJUnit()
    reports {
        junitXml.required.set(true)
        html.required.set(true)
    }
}


application {
    // Define the main class for the application.
    mainClass = "org.example.App"
}


sourceSets {
    main {
        java {
            srcDirs("src/main/java")
        }
    }
    test {
        java {
            srcDirs("src/test/java")
        }
    }
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'
//tasks.test {    useJUnitPlatform()}
